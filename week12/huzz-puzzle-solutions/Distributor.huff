 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()
 
 #define macro DISTRIBUTE() = takes (0) returns (0) {
    // initialize i [array.length] in memory at 0x00
    0x24 calldataload                           // [length]
    dup1                                        // [length, length]
    0x00 mstore                                 // [length]

    // store the first element's calldata offset in memory at 0x20
    0x44 0x20 mstore                            // [length]

    // store the quotient (callvalue/array.length) in memory at 0x40
    callvalue                                   // [callvalue, length]
    div                                         // [amt]
    0x40 mstore                                 // []

    loop:
        // get the next address in the array and prepare for sending the amt
        0x20 mload                              // [address_offset]
        0x00 0x00 0x00 0x00                     // [0, 0, 0, 0, address_offset]
        // get the amt
        0x40 mload                              // [amt, 0, 0, 0, 0, address_offset]
        dup6                                    // [address_offset, amt, 0, 0, 0, 0, address_offset]
        calldataload                            // [address, amt, 0, 0, 0, 0, address_offset]
        gas                                     // [gas, address, amt, 0, 0, 0, 0, address_offset]

        // SEND!
        call                                    // [success, address_offset]
        pop                                     // [address_offset]

        // add 32 to the address_offset
        0x20 add                                // [next_offset]
        0x20 mstore                             // []

        // decrement i by 1
        0x01                                    // [1]
        0x00 mload                              // [i, 1]
        sub                                     // [i-1]
        dup1                                    // [i-1, i-1]
        0x00 mstore                             // [i-1]

        // loop again if there are more elements in the array
        iszero                                  // [i-1 == 0]
        iszero                                  // [i-1 != 0]
        loop jumpi                              // []
    0x00 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                             // [calldata_func_sig]
    __FUNC_SIG(distribute) eq distribute_pc jumpi          // []

    0x00 0x00 revert 

    distribute_pc:
        DISTRIBUTE()
}