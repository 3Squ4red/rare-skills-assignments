
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)


#define macro MAX_OF_ARRAY() = takes (0) returns (0) {
    // initialize i [array.length] in memory @0x00 or revert if its 0 
    0x24 calldataload                           // [length]
    dup1                                        // [length, length]
    iszero is_empty jumpi                       // [length]
    0x00 mstore                                 // []

    // store the first element's calldata offset in memory @0x20
    0x44 0x20 mstore                            // []

    loop:
        // get the next num in array
        0x20 mload                              // [num_offset]
        dup1                                    // [num_offset, num_offset]
        calldataload                            // [num, num_offset]

        // get the last max num from memory[40]
        0x40 mload                              // [max_num, num, num_offset]

        // check the next num in array if max_num > num
        gt                                      // [max_num > num, num_offset]
        next jumpi                              // [num_offset]

        // update max_num at memory[40]
        dup1                                    // [num_offset, num_offset]
        calldataload                            // [num, num_offset]
        0x40 mstore                             // [num_offset]

        next:                                       // [num_offset]
            // add 32 to the num_offset
            0x20 add                                // [next_offset]
            0x20 mstore                             // []

            // decrement i by 1
            0x01                                    // [1]
            0x00 mload                              // [i, 1]
            sub                                     // [i-1]
            dup1                                    // [i-1, i-1]
            0x00 mstore                             // [i-1]

            // loop again if there are more elements in the array
            iszero                                  // [i-1 == 0]
            iszero                                  // [i-1 != 0]
            loop jumpi                              // []

    // return the max num from memory @0x40
    0x20 0x040 return

    is_empty:                                       // [length]
        0x00 0x00 revert                            // [length]
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                       // [calldata_func_sig]
    __FUNC_SIG(maxOfArray) eq max_of_array jumpi     // []

    0x00 0x00 revert 

    max_of_array:
        MAX_OF_ARRAY()
}