
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define constant ZERO_INDEX_SLOT = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563


 #define macro PUSHH() = takes (0) returns (0) {
    // increase length
    0x00 sload                                  // [length]
    dup1                                        // [length, length]
    0x01 add                                    // [new_length, length]
    0x00 sstore                                 // [length]

    // add the new value to the array
    [ZERO_INDEX_SLOT]                           // [zero_index_slot, length]
    add                                         // [new_num_slot]
    0x04 calldataload                           // [new_num, num_num_slot]
    swap1                                       // [num_num_slot, new_num]
    sstore                                      // []

    0x00 0x00 return
 }

 #define macro POPP() = takes (0) returns (0) {
    // decrease length
    0x01                                        // [1]
    0x00 sload                                  // [length, 1]
    dup1                                        // [length, length, 1]
    iszero                                      // [length == 0, length, 1]
    empty_revert jumpi                          // [length, 1]

    sub                                         // [new_length]
    dup1                                        // [new_length, new_length]
    0x00 sstore                                 // [new_length]

    // remove the num
    [ZERO_INDEX_SLOT]                           // [zero_index_slot, new_length]
    add                                         // [last_index_slot]
    0x00                                        // [0, last_index_slot]
    swap1                                       // [last_index_slot, 0]
    sstore                                      // []

    0x00 0x00 return

    empty_revert:                               // [length, 1]
        __ERROR(ZeroArray)                      // [error_sig, length, 1]
        0x00 mstore                             // [length, 1]
        0x04 0x00 revert                        // [length, 1]
 }

 #define macro READ() = takes (0) returns (0) {
    0x04 calldataload                           // [input_index]
    dup1                                        // [input_index, input_index]
    0x00 sload                                  // [length, input_index, input_index]
    gt                                          // [length > input_index, input_index]
    read_num jumpi                              // [input_index]

    __ERROR(OutOfBounds)                        // [error_sig, input_index]
    0x00 mstore                                 // [input_index]
    0x04 0x00 revert                            // [input_index]

    read_num:                                   // [input_index]
        [ZERO_INDEX_SLOT]                       // [zero_index_slot, input_index]
        add                                     // [required_index_slot]
        sload                                   // [num]
        0x00 mstore                             // []
        0x20 0x00 return                        // []
 }

 #define macro LENGTH() = takes (0) returns (0) {
    0x00 sload                                  // [length]
    0x00 mstore                                 // []
    0x20 0x00 return                            // []
 }

 #define macro WRITE() = takes (0) returns (0) {
    0x04 calldataload                           // [input_index]
    dup1                                        // [input_index, input_index]
    0x00 sload                                  // [length, input_index, input_index]
    gt                                          // [length > input_index, input_index]
    write_num jumpi                             // [input_index]

    __ERROR(OutOfBounds)                        // [error_sig, input_index]
    0x00 mstore                                 // [input_index]
    0x04 0x00 revert                            // [input_index]

    write_num:                                  // [input_index]
        [ZERO_INDEX_SLOT]                       // [zero_index_slot, input_index]
        add                                     // [required_index_slot]
        0x24 calldataload                       // [new_num, required_index_slot]
        swap1                                   // [required_index_slot, new_num]
        sstore                                  // []
    
    // no need to return from here as this is the last macro being called
 }
 

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                  // [calldata_func_sig]
    dup1 dup1 dup1 dup1                         // [calldata_func_sig, calldata_func_sig, calldata_func_sig, calldata_func_sig, calldata_func_sig]
    
    __FUNC_SIG(pushh) eq pushh_pc jumpi         // [calldata_func_sig, calldata_func_sig, calldata_func_sig, calldata_func_sig]

    __FUNC_SIG(popp) eq popp_pc jumpi           // [calldata_func_sig, calldata_func_sig, calldata_func_sig]
    
    __FUNC_SIG(read) eq read_pc jumpi           // [calldata_func_sig, calldata_func_sig]
    
    __FUNC_SIG(length) eq length_pc jumpi       // [calldata_func_sig]
    
    __FUNC_SIG(write) eq write_pc jumpi         // []

    0x00 0x00 revert 

    pushh_pc:
        PUSHH()
    popp_pc:
        POPP()
    read_pc:
        READ()
    length_pc:
        LENGTH()
    write_pc:
        WRITE()
 }