 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)

 #define macro VALUE() = takes (0) returns (0) {
    0x24 calldataload        // [second_num]
    // store the second num in memory at 0
    0x00 mstore              // []
    0x04 calldataload        // [first_num]
    __EVENT_HASH(Value)      // [event_sig, first_num]
    0x20 0x00                // [mem_start, mem_end, event_sig, first_num]
    log2                     // []
}

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                  // [calldata_func_sig]
    __FUNC_SIG(value) eq value_pc jumpi     // []

    0x00 0x00 revert 

    value_pc:
        VALUE()
 }
