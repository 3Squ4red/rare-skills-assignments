/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro DONATED() = takes (0) returns (1) {
    caller                                                  // [caller]
    sload                                                   // [total_donation]

    // End stack: [total_donation]
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                              // [calldata_func_sig]
    __FUNC_SIG(donated) eq donated_pc jumpi                 // []

    DONATED()                                               // [total_donation]
    callvalue                                               // [callvalue, total_donation]
    add                                                     // [new_total_donation]
    caller                                                  // [caller (used as slot no.), new_total_donation]
    sstore                                                  // []

    donated_pc:
        DONATED()                                           // [total_donation]
        0x00 mstore                                         // []
        0x20 0x00 return                                    // []
}